rate: >
  [[[
    let rate = variables.rate;
    return `<span>${rate}kW</span>`
  ]]]

time: >
  [[[
    if(entity.state == 'unavailable') { return `<span>?</span>`; }
    let needed_capacity = entity.state > 80 ? 58 * ((100 - entity.state) / 100) :  58 * ((80 - entity.state) / 100);
    let hours = needed_capacity / variables.rate;
    let minutes = (Math.round((hours % 1) * 60) < 10 && hours >= 1) ? '0' + Math.round((hours % 1) * 60) : Math.round((hours % 1 ) * 60);
    if(hours >= 1) {
      if(minutes == 0 || minutes == 60) {
          return `<span>${Math.round(hours)}h</span>`;
        } else {
          return `<span>${Math.round(hours)}h ${minutes}min</span>`;
        }
    } else {
      return `<span>${minutes} min</span>`;
    }
  ]]]

hourly: >
  [[[
    let needed_capacity = 58;
    let hour_time = ((variables.rate / needed_capacity)*100).toFixed(1) + '% /hora'
    return `<span>${hour_time}</span>`;
  ]]]
